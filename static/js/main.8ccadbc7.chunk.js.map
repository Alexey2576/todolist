{"version":3,"sources":["Components/CircularPreloader/CircularPreloader.module.css","Redux/Tasks/Enums/filterStatusTask.ts","Redux/Tasks/Enums/filterPriorityTask.ts","API/settings-api.ts","API/auth-api.ts","Redux/App/appReducer.ts","Redux/Auth/authReducer.ts","API/tasks-api.ts","API/todoLists-api.ts","Redux/TodoLists/todoListsReducer.ts","Redux/Tasks/tasksReducer.ts","Redux/index.ts","Redux/store.ts","Utils/useActions.ts","Redux/Auth/Selectors/selectIsLoggedIn.ts","Features/Login/Login.tsx","Components/Commons/NotFound/NotFound.tsx","Redux/App/Selectors/selectIsInitialized.ts","Redux/App/Selectors/selectIsFetching.ts","Components/AuthorizedApp/SideBar/SideBar.tsx","Components/AuthorizedApp/TodoLists/TodoList/FilterButtons/FilterButtons.tsx","Components/Commons/EditableSpan/EditableSpan.tsx","Components/AuthorizedApp/TodoLists/TodoList/TitleTodoList/TitleTodoList.tsx","Components/AuthorizedApp/TodoLists/TodoList/AddTaskTodoList/AddTaskTodoList.tsx","Components/AuthorizedApp/TodoLists/TodoList/ListTasksTodoList/TaskTodoList/TaskTittle/TaskTitle.tsx","Components/AuthorizedApp/TodoLists/TodoList/ListTasksTodoList/TaskTodoList/TaskTodoList.tsx","Components/AuthorizedApp/TodoLists/TodoList/ListTasksTodoList/ListTasksTodoList.tsx","Redux/Tasks/Selectors/selectTasks.ts","Components/AuthorizedApp/TodoLists/TodoList/LinearProgressTasks/LinearProgressTasks.tsx","Utils/getFilteredCheckedTasks.ts","Utils/getFilteredPriorityTasks.ts","Components/AuthorizedApp/TodoLists/TodoList/TodoList.tsx","Redux/TodoLists/Selectors/selectTodoLists.ts","Components/AuthorizedApp/TodoLists/TodoLists.tsx","Components/AuthorizedApp/AddNewTodoList/AddNewTodoList.tsx","Components/AuthorizedApp/AuthorizedApp.tsx","Components/AppBarTodoList/AppBarTodoList.tsx","Redux/App/Selectors/selectErrorMessage.ts","Components/Commons/Snackbar/CustomSnackbar.tsx","Components/CircularPreloader/CircularPreloader.tsx","Components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","FilterStatusTask","FilterPriorityTask","instanceAxios","axios","create","baseURL","withCredentials","headers","authAPI","data","post","then","res","delete","get","initializeApp","createAsyncThunk","_","a","dispatch","rejectWithValue","resultCode","isLoggedIn","setIsErrorGettingData","errorMessage","messages","asyncActions","slice","createSlice","name","initialState","isFetching","isInitialized","reducers","setIsFetchingData","state","action","payload","extraReducers","builder","addCase","fulfilled","rejected","appReducer","reducer","actions","login","loggedData","fieldsError","fieldsErrors","logout","authReducer","tasksApi","todolistId","count","page","title","taskId","task","put","todoListsApi","getTodoLists","todoLists","addTodoList","todoList","item","removeTodoList","todoList_ID","changeTitleTodoList","param","newTitle","changeFilterCheckedTodoList","index","findIndex","tl","id","filterStatus","changeFilterPriorityTodoList","filterPriority","setValueSelect","selectPriorityValue","setProgressTodoList","progress","map","All","push","splice","todoListsReducer","getTasks","todoListID","error","tasks","items","addTask","removeTask","task_ID","setProgressTask","updateTask","getState","updateTaskBody","rootState","find","t","updateDomainTaskBody","description","status","priority","startDate","deadline","todoListsActions","forEach","unshift","tasksReducer","appActions","asyncAppActions","appSlice","authActions","asyncAuthActions","tasksActions","asyncTasksActions","taskSlice","asyncTodoListsActions","todoListsSlice","store","configureStore","app","auth","middleware","getDefaultMiddleware","concat","thunk","useAppSelector","useSelector","useActions","useDispatch","useMemo","bindActionCreators","selectIsLoggedIn","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","length","onSubmit","formikHelpers","type","match","setFieldError","fieldError","to","Grid","container","justifyContent","alignItems","marginTop","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","variant","NotFound","selectIsInitialized","selectIsFetching","SideBar","memo","open","handleDrawerCloseCallback","classes","useStyles","Drawer","className","clsx","drawer","drawerOpen","drawerClose","paper","toolbar","IconButton","onClick","Divider","List","text","ListItem","button","ListItemIcon","ListItemText","primary","makeStyles","theme","createStyles","width","flexShrink","whiteSpace","transition","transitions","easing","sharp","duration","enteringScreen","leavingScreen","overflowX","spacing","breakpoints","up","display","padding","mixins","content","flexGrow","hide","FilterButtons","React","useState","anchorEl","setAnchorEl","setAllHandler","useCallback","setActiveHandler","New","setCompletedHandler","Completed","handleClickHandler","event","currentTarget","handleCloseHandler","handleCloseAllHandler","handleCloseHighHandler","High","handleCloseMiddleHandler","Middle","handleCloseLowHandler","Low","grid_item","ButtonGroup","fullWidth","aria-controls","aria-haspopup","Menu","keepMounted","Boolean","onClose","MenuItem","EditableSpan","props","value","onChangeTextTitle","editMode","setEditModeCallback","onBlurHandler","onDoubleClickHandler","onChangeHandler","e","onKeyPressHandler","key","autoFocus","onBlur","onChange","onKeyPress","size","Typography","gutterBottom","onDoubleClick","TitleTodoLists","valueTitle","setValueTitle","setEditMode","onClickRemoveTodoListHandler","onChangeTextTitleHandler","grid_container","marginBottom","AddTaskTodoList","progressTodoList","valueTask","setValueTask","errorInput","setErrorInput","errorSelect","setErrorSelect","onClickAddTaskHandler","trim","null","changeValueSelectHandler","onChangeTextTaskHandler","onEnterHandler","text_field","disabled","helperText","InputLabel","FormHelperText","form_helper_text","Select","select","labelId","CircularProgress","height","marginRight","TaskTitle","task_title","task_priority","setValue","fontSize","textAlign","TaskTodoList","isDisable","setIsDisable","opacityIconButton","opacityTask","onMouseOut","onMouseOverHandler","onClickRemoveTaskHandler","onChangeCheckedTaskHandler","divider","onMouseOver","opacity","inputProps","checked","aria-label","ListTasksTodoList","component","selectTasks","LinearProgressTasks","numberOfAllTasks","numberOfCompletedTasks","getProgress","linear_progress_tasks","LinearProgressWithLabel","Box","mr","LinearProgress","minWidth","Math","round","getFilteredCheckedTasksCallback","filteredPriorityState","filter","getFilteredPriorityTasks","TodoList","filteredTasks","useEffect","Paper","elevation","selectTodoLists","TodoLists","AddNewTodoList","newTodoListTitle","setNewTodoListTitle","multiline","placeholder","AuthorizedApp","setOpen","AppBarTodoList","handleDrawerOpenCallback","AppBar","position","appBar","appBarShift","Toolbar","edge","menuButton","zIndex","marginLeft","selectErrorMessage","Alert","ref","CustomSnackbar","handleClose","reason","Stack","sx","Snackbar","autoHideDuration","severity","CircularPreloader","s","circularPreloader","top","App","Container","fixed","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.8ccadbc7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circularPreloader\":\"CircularPreloader_circularPreloader__3tNe5\"};","export enum FilterStatusTask {\r\n   New = 0,\r\n   InProgress = 1,\r\n   Completed = 2,\r\n   Draft = 3,\r\n   All = 4,\r\n}","export enum FilterPriorityTask {\r\n   All = 0,\r\n   Low = 1,\r\n   Middle = 2,\r\n   High = 3,\r\n   Urgently = 4,\r\n   Later = 5,\r\n   null = \"\",\r\n}","import axios from \"axios\";\r\nimport {TaskType} from \"../Redux/Tasks/Types\";\r\n\r\nexport const instanceAxios = axios.create({\r\n   baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n   withCredentials: true,\r\n   headers: {\r\n      \"api-key\": \"0b35bf30-9811-4ef2-8cc3-183ac4bf4914\"\r\n   }\r\n})\r\n\r\n//========================================= TYPES ======================================================================\r\nexport type CommonResponseType<T = {}> = {\r\n   data: T\r\n   messages: string[]\r\n   fieldsErrors: FieldsErrorType[]\r\n   resultCode: number\r\n}\r\n\r\nexport type FieldsErrorType = {\r\n   errorMessage: string\r\n   fieldError: string\r\n}\r\nexport type ResponseFetchingTasksType = {\r\n   items: TaskType[]\r\n   totalCount: number\r\n   error: string\r\n}","import {CommonResponseType, instanceAxios} from \"./settings-api\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\nexport const authAPI = {\r\n   login(data: LoginDataType) {\r\n      return instanceAxios\r\n         .post<LoginDataType, AxiosResponse<CommonResponseType<{ userId: number }>>>(`auth/login`, data)\r\n         .then(res => res.data)\r\n   },\r\n   logout() {\r\n      return instanceAxios\r\n         .delete<CommonResponseType>(`auth/login`)\r\n         .then(res => res.data)\r\n   },\r\n   me() {\r\n      return instanceAxios\r\n         .get<CommonResponseType<MeType>>(`auth/me`)\r\n         .then(res => res.data)\r\n   }\r\n}\r\n\r\nexport type LoginDataType = {\r\n   email: string\r\n   password: string\r\n   rememberMe?: boolean\r\n   captcha?: string\r\n}\r\n\r\nexport type MeType = {\r\n   id: number,\r\n   email: string\r\n   login: string\r\n}\r\n","import {authAPI} from \"../../API/auth-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const initializeApp = createAsyncThunk(\r\n   \"app/initializeApp\",\r\n   async (_, {dispatch, rejectWithValue}) => {\r\n      try {\r\n         const data = await authAPI.me()\r\n         if (data.resultCode === 0) {\r\n            return {isLoggedIn: true}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0]})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      }\r\n   })\r\n\r\nexport const asyncActions = {\r\n   initializeApp\r\n}\r\n\r\nexport const slice = createSlice({\r\n   name: \"app\",\r\n   initialState: {\r\n      errorMessage: \"\",\r\n      isFetching: false,\r\n      isInitialized: false,\r\n   },\r\n   reducers: {\r\n      setIsFetchingData: (state, action: PayloadAction<{ isFetching: boolean }>) => {\r\n         state.isFetching = action.payload.isFetching\r\n      },\r\n      setIsErrorGettingData: (state, action: PayloadAction<{ errorMessage: string }>) => {\r\n         state.errorMessage = action.payload.errorMessage\r\n      },\r\n   },\r\n   extraReducers: builder => {\r\n      builder\r\n         .addCase(initializeApp.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n         })\r\n         .addCase(initializeApp.rejected, (state) => {\r\n            state.isInitialized = true\r\n         })\r\n   }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setIsErrorGettingData, setIsFetchingData} = slice.actions","import {FieldsErrorType} from \"../../API/settings-api\";\r\nimport {authAPI, LoginDataType} from \"../../API/auth-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {initializeApp, setIsErrorGettingData, setIsFetchingData} from \"../App/appReducer\";\r\n\r\nconst login = createAsyncThunk<undefined, LoginDataType, {\r\n   rejectValue: { errorMessage: string, fieldsError?: FieldsErrorType[] }\r\n}>(\r\n   \"auth/login\",\r\n   async (loggedData, {dispatch, rejectWithValue}\r\n   ) => {\r\n      dispatch(setIsFetchingData({isFetching: true}))\r\n      try {\r\n         const data = await authAPI.login(loggedData)\r\n         if (data.resultCode === 0) {\r\n            return\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0], fieldsError: data.fieldsErrors})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      } finally {\r\n         dispatch(setIsFetchingData({isFetching: false}))\r\n      }\r\n   })\r\n\r\nconst logout = createAsyncThunk<undefined, undefined, { rejectValue: { errorMessage: string } }>(\r\n   \"auth/logout\",\r\n   async (_, {dispatch, rejectWithValue}\r\n   ) => {\r\n      dispatch(setIsFetchingData({isFetching: true}))\r\n      try {\r\n         const data = await authAPI.logout()\r\n         if (data.resultCode === 0) {\r\n            return;\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0]})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      } finally {\r\n         dispatch(setIsFetchingData({isFetching: false}))\r\n      }\r\n   })\r\n\r\nexport const asyncActions = {\r\n   login,\r\n   logout,\r\n}\r\n\r\nconst slice = createSlice({\r\n   name: \"auth\",\r\n   initialState: {\r\n      isLoggedIn: false,\r\n   },\r\n   reducers: {},\r\n   extraReducers: builder => {\r\n      builder\r\n         .addCase(login.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n         })\r\n         .addCase(logout.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n         })\r\n         .addCase(initializeApp.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n         })\r\n   }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n","import {TaskType, UpdateDomainBodyTaskType} from \"../Redux/Tasks/Types\";\r\nimport {CommonResponseType, instanceAxios, ResponseFetchingTasksType} from \"./settings-api\";\r\n\r\nexport const tasksApi = {\r\n   getTasks: (todolistId: string, count: number, page: number) => {\r\n      return instanceAxios.get<ResponseFetchingTasksType>(`todo-lists/${todolistId}/tasks?count=${count}&page=${page}`).then(res => res.data)\r\n   },\r\n   createTask: (todolistId: string, title: string) => {\r\n      return instanceAxios.post<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title}).then(res => res.data)\r\n   },\r\n   deleteTask: (todolistId: string, taskId: string) => {\r\n      return instanceAxios.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`).then(res => res.data)\r\n   },\r\n   updateTask: (todolistId: string, taskId: string, task: UpdateDomainBodyTaskType) => {\r\n      return instanceAxios.put<CommonResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks/${taskId}`, task).then(res => res.data)\r\n   },\r\n}","import {TodoListsStateType} from \"../Redux/TodoLists/Types\";\r\nimport {CommonResponseType, instanceAxios} from \"./settings-api\";\r\n\r\nexport const todoListsApi = {\r\n   getTodoLists: () => {\r\n      return instanceAxios.get<TodoListsStateType[]>(`todo-lists`).then(res => res.data)\r\n   },\r\n   createTodoList: (title: string) => {\r\n      return instanceAxios.post<CommonResponseType<{ item: TodoListsStateType }>>(`todo-lists`, { title }).then(res => res.data)\r\n   },\r\n   deleteTodoList: (todolistId: string) => {\r\n      return instanceAxios.delete<CommonResponseType>(`todo-lists/${todolistId}`).then(res => res.data)\r\n   },\r\n   updateTodoList: (todolistId: string, title: string) => {\r\n      return instanceAxios.put<CommonResponseType>(`todo-lists/${todolistId}`, { title }).then(res => res.data)\r\n   },\r\n}","import {todoListsApi} from \"../../API/todoLists-api\";\r\nimport {FilterPriorityTask, FilterStatusTask} from \"../Tasks/Enums\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setIsErrorGettingData, setIsFetchingData} from \"../App/appReducer\";\r\nimport {ChangeTitleParamType, ProgressTodoListType, TodoListsStateType} from \"./Types\";\r\n\r\nconst getTodoLists = createAsyncThunk(\r\n   \"todoList/getTodoLists\",\r\n   async (_, {dispatch, rejectWithValue}\r\n   ) => {\r\n      try {\r\n         dispatch(setIsFetchingData({isFetching: true}))\r\n         let todoLists = await todoListsApi.getTodoLists()\r\n         if (todoLists) {\r\n            return {todoLists}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: \"TodoLists is missing\"}))\r\n            return rejectWithValue({errorMessage: \"TodoLists is missing\"})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      } finally {\r\n         dispatch(setIsFetchingData({isFetching: false}))\r\n      }\r\n   })\r\n\r\nconst addTodoList = createAsyncThunk(\r\n   \"todoList/addTodoList\",\r\n   async (title: string, {dispatch, rejectWithValue}\r\n   ) => {\r\n      try {\r\n         dispatch(setIsFetchingData({isFetching: true}))\r\n         let data = await todoListsApi.createTodoList(title)\r\n         if (data.resultCode === 0) {\r\n            return {todoList: data.data.item}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0]})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      } finally {\r\n         dispatch(setIsFetchingData({isFetching: false}))\r\n      }\r\n   })\r\n\r\nconst removeTodoList = createAsyncThunk(\r\n   \"todoList/removeTodoList\",\r\n   async (todoList_ID: string, {dispatch, rejectWithValue}\r\n   ) => {\r\n      try {\r\n         dispatch(setIsFetchingData({isFetching: true}))\r\n         let data = await todoListsApi.deleteTodoList(todoList_ID)\r\n         if (data.resultCode === 0) {\r\n            return {todoList_ID}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0]})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      } finally {\r\n         dispatch(setIsFetchingData({isFetching: false}))\r\n      }\r\n   })\r\n\r\nconst changeTitleTodoList = createAsyncThunk(\r\n   \"todoList/changeTitleTodoList\",\r\n   async (param: ChangeTitleParamType, {dispatch, rejectWithValue}\r\n   ) => {\r\n      const {todoList_ID, newTitle} = param\r\n      try {\r\n         dispatch(setIsFetchingData({isFetching: true}))\r\n         let data = await todoListsApi.updateTodoList(todoList_ID, newTitle)\r\n         if (data.resultCode === 0) {\r\n            return {todoList_ID, newTitle}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0]})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      } finally {\r\n         dispatch(setIsFetchingData({isFetching: false}))\r\n      }\r\n   })\r\n\r\nexport const asyncActions = {\r\n   addTodoList,\r\n   getTodoLists,\r\n   removeTodoList,\r\n   changeTitleTodoList,\r\n}\r\n\r\nexport const slice = createSlice({\r\n   name: \"todoList\",\r\n   initialState: [] as TodoListsStateType[],\r\n   reducers: {\r\n      changeFilterCheckedTodoList: (\r\n         state,\r\n         action: PayloadAction<{ todoList_ID: string, filterStatus: FilterStatusTask }>\r\n      ) => {\r\n         const index = state.findIndex(tl => tl.id === action.payload.todoList_ID)\r\n         state[index].filterStatus = action.payload.filterStatus\r\n      },\r\n      changeFilterPriorityTodoList: (\r\n         state,\r\n         action: PayloadAction<{ todoList_ID: string, filterPriority: FilterPriorityTask }>\r\n      ) => {\r\n         const index = state.findIndex(tl => tl.id === action.payload.todoList_ID)\r\n         state[index].filterPriority = action.payload.filterPriority\r\n      },\r\n      setValueSelect: (\r\n         state,\r\n         action: PayloadAction<{ todoList_ID: string, selectPriorityValue: FilterPriorityTask }>\r\n      ) => {\r\n         const index = state.findIndex(tl => tl.id === action.payload.todoList_ID)\r\n         state[index].selectPriorityValue = action.payload.selectPriorityValue\r\n      },\r\n      setProgressTodoList: (\r\n         state,\r\n         action: PayloadAction<{ todoList_ID: string, progress: ProgressTodoListType }>\r\n      ) => {\r\n         const index = state.findIndex(tl => tl.id === action.payload.todoList_ID)\r\n         state[index].progress = action.payload.progress\r\n      },\r\n   },\r\n   extraReducers: builder => {\r\n      builder\r\n         .addCase(getTodoLists.fulfilled, (state, action) => {\r\n            return action.payload.todoLists.map(tl => ({\r\n               ...tl,\r\n               filterPriority: FilterPriorityTask.All,\r\n               filterStatus: FilterStatusTask.All,\r\n               selectPriorityValue: null,\r\n               progress: null\r\n            }))\r\n         })\r\n         .addCase(addTodoList.fulfilled, (state, action) => {\r\n            state.push(action.payload.todoList)\r\n         })\r\n         .addCase(removeTodoList.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoList_ID)\r\n            state.splice(index, 1)\r\n         })\r\n         .addCase(changeTitleTodoList.fulfilled, (state, action) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoList_ID)\r\n            state[index].title = action.payload.newTitle\r\n         })\r\n   }\r\n})\r\n\r\nexport const todoListsReducer = slice.reducer\r\nexport const {\r\n   setValueSelect,\r\n   setProgressTodoList,\r\n   changeFilterCheckedTodoList,\r\n   changeFilterPriorityTodoList\r\n} = slice.actions","import {RootStateType} from \"../store\";\r\nimport {tasksApi} from \"../../API/tasks-api\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {setIsErrorGettingData, setIsFetchingData} from \"../App/appReducer\";\r\nimport {setProgressTodoList} from \"../TodoLists/todoListsReducer\";\r\nimport {\r\n   TaskType,\r\n   TasksStateType,\r\n   AddTaskParamType,\r\n   ProgressTaskType,\r\n   RemoveTaskParamType,\r\n   UpdateTaskParamType,\r\n   UpdateDomainBodyTaskType\r\n} from \"./Types\";\r\nimport {todoListsActions} from \"../index\";\r\n\r\nconst getTasks = createAsyncThunk<{ todoListID: string, tasks: TaskType[] }, string>(\r\n   \"task/getTasks\",\r\n   async (todoListID: string, {dispatch, rejectWithValue}\r\n   ) => {\r\n      dispatch(setIsFetchingData({isFetching: true}))\r\n      try {\r\n         const data = await tasksApi.getTasks(todoListID, 10, 1)\r\n         const errorMessage = data.error\r\n         if (data) {\r\n            return {todoListID, tasks: data.items}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage}))\r\n            return rejectWithValue({errorMessage: \"Don't fetch task. Try later\"})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      } finally {\r\n         dispatch(setIsFetchingData({isFetching: false}))\r\n      }\r\n   })\r\n\r\nconst addTask = createAsyncThunk(\r\n   \"task/addTask\",\r\n   async (param: AddTaskParamType, {dispatch, rejectWithValue}\r\n   ) => {\r\n      const {title, todoList_ID} = param\r\n      dispatch(setProgressTodoList({todoList_ID, progress: \"add-task\"}))\r\n      try {\r\n         const data = await tasksApi.createTask(todoList_ID, title)\r\n         if (data.resultCode === 0) {\r\n            return {todoList_ID, task: data.data.item}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0]})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      } finally {\r\n         dispatch(setProgressTodoList({todoList_ID, progress: null}))\r\n      }\r\n   })\r\n\r\nconst removeTask = createAsyncThunk(\r\n   \"task/removeTask\",\r\n   async (param: RemoveTaskParamType, {dispatch, rejectWithValue}\r\n   ) => {\r\n      const {todoList_ID, task_ID} = param\r\n      try {\r\n         dispatch(setProgressTask({todoList_ID, task_ID, progress: \"remove-task\"}))\r\n         const data = await tasksApi.deleteTask(todoList_ID, task_ID)\r\n         if (data.resultCode === 0) {\r\n            dispatch(setProgressTask({todoList_ID, task_ID, progress: null}))\r\n            return {todoList_ID, task_ID}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0]})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      }\r\n   })\r\n\r\nconst updateTask = createAsyncThunk(\r\n   \"task/updateTask\",\r\n   async (param: UpdateTaskParamType, {dispatch, rejectWithValue, getState}\r\n   ) => {\r\n      const {todoList_ID, task_ID, updateTaskBody} = param\r\n      const rootState = getState() as RootStateType\r\n      try {\r\n         const task = rootState.tasks[todoList_ID].find(t => t.id === task_ID)\r\n         if (!task) {\r\n            dispatch(setIsErrorGettingData({errorMessage: \"Task don't find\"}))\r\n            return rejectWithValue({errorMessage: \"Task don't find\"})\r\n         }\r\n         const updateDomainTaskBody: UpdateDomainBodyTaskType = {\r\n            title: task.title,\r\n            description: task.description,\r\n            status: task.status,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            deadline: task.deadline,\r\n            ...updateTaskBody\r\n         }\r\n\r\n         const data = await tasksApi.updateTask(todoList_ID, task.id, updateDomainTaskBody)\r\n         if (data.resultCode === 0) {\r\n            return {todoList_ID, task_ID: task.id, updateTaskBody: data.data.item}\r\n         } else {\r\n            dispatch(setIsErrorGettingData({errorMessage: data.messages[0]}))\r\n            return rejectWithValue({errorMessage: data.messages[0]})\r\n         }\r\n      } catch (e) {\r\n         dispatch(setIsErrorGettingData({errorMessage: \"Some error\"}))\r\n         return rejectWithValue({errorMessage: \"Some error\"})\r\n      }\r\n   })\r\n\r\nexport const asyncActions = {\r\n   addTask,\r\n   getTasks,\r\n   removeTask,\r\n   updateTask,\r\n}\r\n\r\nexport const slice = createSlice({\r\n   name: \"task\",\r\n   initialState: {} as TasksStateType,\r\n   reducers: {\r\n      setProgressTask: (\r\n         state,\r\n         action: PayloadAction<{ todoList_ID: string, task_ID: string, progress: ProgressTaskType }>\r\n      ) => {\r\n         const index = state[action.payload.todoList_ID].findIndex(t => t.id === action.payload.task_ID)\r\n         state[action.payload.todoList_ID][index].progress = action.payload.progress\r\n      },\r\n   },\r\n   extraReducers: (builder) => {\r\n      builder\r\n         .addCase(todoListsActions.addTodoList.fulfilled, (state, action) => {\r\n            state[action.payload.todoList.id] = []\r\n         })\r\n         .addCase(todoListsActions.removeTodoList.fulfilled, (state, action) => {\r\n            delete state[action.payload.todoList_ID]\r\n         })\r\n         .addCase(todoListsActions.getTodoLists.fulfilled, (state, action) => {\r\n            action.payload.todoLists.forEach((tl: { id: string }) => state[tl.id] = [])\r\n         })\r\n         .addCase(getTasks.fulfilled, (state, action) => {\r\n            state[action.payload.todoListID] = action.payload.tasks\r\n         })\r\n         .addCase(addTask.fulfilled, (state, action) => {\r\n            state[action.payload.todoList_ID].unshift({...action.payload.task, progress: null})\r\n         })\r\n         .addCase(removeTask.fulfilled, (state, action) => {\r\n            const index = state[action.payload.todoList_ID].findIndex(t => t.id === action.payload.task_ID)\r\n            state[action.payload.todoList_ID].splice(index, 1)\r\n         })\r\n         .addCase(updateTask.fulfilled, (state, action) => {\r\n            const index = state[action.payload.todoList_ID].findIndex(t => t.id === action.payload.task_ID)\r\n            state[action.payload.todoList_ID][index] =\r\n               {...state[action.payload.todoList_ID][index], ...action.payload.updateTaskBody}\r\n         })\r\n\r\n   },\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {setProgressTask} = slice.actions\r\n","import {asyncActions as asyncAuthActions} from './Auth/authReducer'\r\nimport {asyncActions as asyncAppActions, slice as appSlice} from './App/appReducer'\r\nimport {asyncActions as asyncTasksActions, slice as taskSlice} from './Tasks/tasksReducer'\r\nimport {asyncActions as asyncTodoListsActions, slice as todoListsSlice} from './TodoLists/todoListsReducer'\r\n\r\nconst appActions = {\r\n   ...asyncAppActions,\r\n   ...appSlice.actions,\r\n}\r\n\r\nconst authActions = {\r\n   ...asyncAuthActions\r\n}\r\n\r\nconst tasksActions = {\r\n   ...asyncTasksActions,\r\n   ...taskSlice.actions,\r\n}\r\n\r\nconst todoListsActions = {\r\n   ...asyncTodoListsActions,\r\n   ...todoListsSlice.actions,\r\n}\r\n\r\nexport {\r\n   appActions,\r\n   authActions,\r\n   tasksActions,\r\n   todoListsActions,\r\n}\r\n","import {tasksReducer} from \"./Tasks/tasksReducer\";\r\nimport {todoListsReducer} from \"./TodoLists/todoListsReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./App/appReducer\";\r\nimport {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"./Auth/authReducer\";\r\nimport {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\r\n\r\nexport const store = configureStore({\r\n   reducer: {\r\n      todoLists: todoListsReducer,\r\n      tasks: tasksReducer,\r\n      app: appReducer,\r\n      auth: authReducer,\r\n   },\r\n   middleware: getDefaultMiddleware().concat(thunk)\r\n})\r\n\r\n\r\n//========================================= TYPES ======================================================================\r\nexport type RootStateType = ReturnType<typeof store.getState>\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector","import {useDispatch} from 'react-redux'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\nimport {AppDispatch} from \"../Redux/store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\n\r\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\r\n   const dispatch = useAppDispatch()\r\n\r\n   return useMemo(() => {\r\n      return bindActionCreators(actions, dispatch)\r\n   }, [])\r\n}","import {RootStateType} from \"../../store\";\r\n\r\nexport const selectIsLoggedIn = (state: RootStateType): boolean => state.auth.isLoggedIn","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport {authActions} from \"../../Redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport Button from '@mui/material/Button';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {LoginDataType} from \"../../API/auth-api\";\r\nimport {useActions} from \"../../Utils/useActions\";\r\nimport FormControl from '@mui/material/FormControl';\r\nimport {selectIsLoggedIn} from \"../../Redux/Auth/Selectors\";\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport {useAppDispatch, useAppSelector} from \"../../Redux/store\";\r\n\r\nexport const Login = () => {\r\n   const dispatch: any = useAppDispatch()\r\n   const {login} = useActions(authActions)\r\n   const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n\r\n   const formik = useFormik({\r\n      initialValues: {\r\n         email: '',\r\n         password: '',\r\n         rememberMe: false\r\n      },\r\n      validate: (values) => {\r\n         const errors: FormikErrorType = {};\r\n         if (!values.email) {\r\n            errors.email = 'Required';\r\n         } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n            errors.email = 'Invalid email address';\r\n         }\r\n\r\n         if (!values.password) {\r\n            errors.password = 'Required';\r\n         } else if (values.password.length < 2) {\r\n            errors.password = 'Password must be 3 characters or more';\r\n         }\r\n         return errors;\r\n      },\r\n      onSubmit: async (loggedData: LoginDataType, formikHelpers: FormikHelpers<LoginDataType>) => {\r\n         const action = await dispatch(login(loggedData))\r\n         if (login.rejected.type.match(action)) {\r\n            if (action.payload.fieldsError.length) {\r\n               const error = action.payload.fieldsError[0]\r\n               formikHelpers.setFieldError(error.fieldError, error.errorMessage)\r\n            }\r\n         }\r\n      },\r\n   });\r\n\r\n   if (isLoggedIn) {\r\n      return <Navigate to={\"/\"}/>\r\n   }\r\n\r\n   return <Grid container justifyContent={'center'}>\r\n      <Grid item justifyContent={'center'} alignItems={'center'} marginTop={'60px'}>\r\n         <form onSubmit={formik.handleSubmit}>\r\n            <FormControl>\r\n               <FormLabel>\r\n                  <p>To log in get registered\r\n                     <a href={'https://social-network.samuraijs.com/'}\r\n                        target='_blank'> here\r\n                     </a>\r\n                  </p>\r\n                  <p>or use common test account credentials:</p>\r\n                  <p>Email: alexeynikinitin@yandex.by</p>\r\n                  <p>Password: M7L85fu96huisXG</p>\r\n               </FormLabel>\r\n               <FormGroup>\r\n                  <TextField\r\n                     label=\"Email\"\r\n                     margin=\"normal\"\r\n                     type=\"email\"\r\n                     {...formik.getFieldProps('email')}\r\n                  />\r\n                  {formik.touched.email && formik.errors.email && <div style={{ color: \"red\" }}>{formik.errors.email}</div>}\r\n                  <TextField\r\n                     type=\"password\"\r\n                     label=\"Password\"\r\n                     margin=\"normal\"\r\n                     {...formik.getFieldProps('password')}\r\n                  />\r\n                  {formik.touched.password && formik.errors.password && <div style={{ color: \"red\" }}>{formik.errors.password}</div>}\r\n                  <FormControlLabel\r\n                     label={'Remember me'}\r\n                     control={\r\n                        <Checkbox\r\n                           {...formik.getFieldProps('rememberMe')}\r\n                        />\r\n                     }\r\n                  />\r\n                  <Button\r\n                     type={'submit'}\r\n                     variant={'contained'}\r\n                     color={'primary'}\r\n                  >\r\n                     Login\r\n                  </Button>\r\n               </FormGroup>\r\n            </FormControl>\r\n         </form>\r\n      </Grid>\r\n   </Grid>\r\n}\r\n\r\ntype FormikErrorType = {\r\n   email?: string\r\n   password?: string\r\n   rememberMe?: boolean\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n   return (\r\n      <div>\r\n         404\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default NotFound;","import {RootStateType} from \"../../store\";\r\n\r\nexport const selectIsInitialized = (state: RootStateType): boolean => state.app.isInitialized","import {RootStateType} from \"../../store\";\r\n\r\nexport const selectIsFetching = (state: RootStateType): boolean => state.app.isFetching","import clsx from 'clsx';\r\nimport React, {FC, memo} from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\n\r\nexport type SideBarType = {\r\n   open: boolean\r\n   handleDrawerCloseCallback: () => void\r\n}\r\nexport const SideBar: FC<SideBarType> = memo(({open, handleDrawerCloseCallback}) => {\r\n   const classes = useStyles()\r\n\r\n   const handleDrawerClose = () => handleDrawerCloseCallback();\r\n\r\n   return (\r\n      <Drawer\r\n         variant=\"permanent\"\r\n         className={clsx(classes.drawer, {\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n         })}\r\n         classes={{\r\n            paper: clsx({\r\n               [classes.drawerOpen]: open,\r\n               [classes.drawerClose]: !open,\r\n            }),\r\n         }}\r\n      >\r\n         <div className={classes.toolbar}>\r\n            <IconButton onClick={handleDrawerClose}\r\n               // className={clsx({\r\n               //    [classes.hide]: !open,\r\n               // })}\r\n            >\r\n               <ChevronLeftIcon/>\r\n            </IconButton>\r\n         </div>\r\n         <Divider/>\r\n         <List>\r\n            {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n               <ListItem button key={text}>\r\n                  <ListItemIcon>\r\n                     {\r\n                        index % 2 === 0\r\n                           ? <InboxIcon/>\r\n                           : <MailIcon/>\r\n                     }\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={text}/>\r\n               </ListItem>\r\n            ))}\r\n         </List>\r\n         <Divider/>\r\n         <List>\r\n            {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n               <ListItem button key={text}>\r\n                  <ListItemIcon>\r\n                     {\r\n                        index % 2 === 0\r\n                           ? <InboxIcon/>\r\n                           : <MailIcon/>\r\n                     }\r\n                  </ListItemIcon>\r\n                  <ListItemText primary={text}/>\r\n               </ListItem>\r\n            ))}\r\n         </List>\r\n      </Drawer>\r\n   );\r\n})\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n   createStyles({\r\n      drawer: {\r\n         width: drawerWidth,\r\n         flexShrink: 0,\r\n         whiteSpace: 'nowrap',\r\n      },\r\n      drawerOpen: {\r\n         width: drawerWidth,\r\n         transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n         }),\r\n      },\r\n      drawerClose: {\r\n         transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n         }),\r\n         overflowX: 'hidden',\r\n         width: theme.spacing(7) + 1,\r\n         [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9) + 1,\r\n         },\r\n      },\r\n      toolbar: {\r\n         display: 'flex',\r\n         alignItems: 'center',\r\n         justifyContent: 'flex-end',\r\n         padding: theme.spacing(0, 1),\r\n         ...theme.mixins.toolbar,\r\n      },\r\n      content: {\r\n         flexGrow: 1,\r\n         padding: theme.spacing(3),\r\n      },\r\n      hide: {\r\n         display: 'none'\r\n      }\r\n   }),\r\n)\r\n","import React, {FC, memo, useCallback} from 'react';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {todoListsActions} from \"../../../../../Redux\";\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport {useActions} from \"../../../../../Utils/useActions\";\r\nimport {FilterPriorityTask, FilterStatusTask} from \"../../../../../Redux/Tasks/Enums\";\r\nimport {Button, ButtonGroup, Grid, IconButton, Menu, MenuItem} from \"@material-ui/core\";\r\n\r\nexport const FilterButtons: FC<FilterButtonsType> = memo(({todoList_ID, filterStatus}) => {\r\n   const {changeFilterCheckedTodoList, changeFilterPriorityTodoList} = useActions(todoListsActions)\r\n   const classes = useStyles();\r\n   const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n\r\n   // ==== Button Group ===\r\n   const setAllHandler = useCallback(() =>\r\n      changeFilterCheckedTodoList({todoList_ID, filterStatus: FilterStatusTask.All}), [todoList_ID])\r\n   const setActiveHandler = useCallback(() =>\r\n      changeFilterCheckedTodoList({todoList_ID, filterStatus: FilterStatusTask.New}), [todoList_ID])\r\n   const setCompletedHandler = useCallback(() =>\r\n      changeFilterCheckedTodoList({todoList_ID, filterStatus: FilterStatusTask.Completed}), [todoList_ID])\r\n\r\n   // ==== Menu (DOTS) ===\r\n   const handleClickHandler = useCallback((event: React.MouseEvent<HTMLButtonElement>) => setAnchorEl(event.currentTarget), [setAnchorEl])\r\n   const handleCloseHandler = useCallback(() => setAnchorEl(null), [setAnchorEl])\r\n\r\n   // ==== Menu ===\r\n   const handleCloseAllHandler = useCallback(() => {\r\n      changeFilterPriorityTodoList({todoList_ID, filterPriority: FilterPriorityTask.All})\r\n      setAnchorEl(null);\r\n   }, [setAnchorEl, todoList_ID]);\r\n   const handleCloseHighHandler = useCallback(() => {\r\n      changeFilterPriorityTodoList({todoList_ID, filterPriority: FilterPriorityTask.High})\r\n      setAnchorEl(null);\r\n   }, [setAnchorEl, todoList_ID]);\r\n   const handleCloseMiddleHandler = useCallback(() => {\r\n      changeFilterPriorityTodoList({todoList_ID, filterPriority: FilterPriorityTask.Middle})\r\n      setAnchorEl(null);\r\n   }, [setAnchorEl, todoList_ID]);\r\n   const handleCloseLowHandler = useCallback(() => {\r\n      changeFilterPriorityTodoList({todoList_ID, filterPriority: FilterPriorityTask.Low})\r\n      setAnchorEl(null);\r\n   }, [setAnchorEl, todoList_ID]);\r\n\r\n   return (\r\n      <Grid item className={classes.grid_item}>\r\n         <ButtonGroup fullWidth color={\"primary\"}>\r\n            <Button\r\n               onClick={setAllHandler}\r\n               variant={filterStatus === FilterStatusTask.All ? \"contained\" : \"outlined\"}\r\n            >\r\n               All\r\n            </Button>\r\n            <Button\r\n               onClick={setActiveHandler}\r\n               variant={filterStatus === FilterStatusTask.New ? \"contained\" : \"outlined\"}\r\n            >\r\n               Active\r\n            </Button>\r\n            <Button onClick={setCompletedHandler}\r\n                    variant={filterStatus === FilterStatusTask.Completed ? \"contained\" : \"outlined\"}\r\n            >\r\n               Completed\r\n            </Button>\r\n         </ButtonGroup>\r\n         <IconButton aria-controls=\"simple-menu\"\r\n                     aria-haspopup=\"true\"\r\n                     onClick={handleClickHandler}>\r\n            <MoreVertIcon/>\r\n         </IconButton>\r\n         <Menu\r\n            id=\"simple-menu\"\r\n            anchorEl={anchorEl}\r\n            keepMounted\r\n            open={Boolean(anchorEl)}\r\n            onClose={handleCloseHandler}\r\n         >\r\n            <MenuItem onClick={handleCloseAllHandler}>All</MenuItem>\r\n            <MenuItem onClick={handleCloseHighHandler}>High</MenuItem>\r\n            <MenuItem onClick={handleCloseMiddleHandler}>Middle</MenuItem>\r\n            <MenuItem onClick={handleCloseLowHandler}>Low</MenuItem>\r\n         </Menu>\r\n      </Grid>\r\n   );\r\n});\r\n\r\nexport type FilterButtonsType = {\r\n   todoList_ID: string\r\n   filterStatus: FilterStatusTask\r\n   filterPriority: FilterPriorityTask\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n   grid_item: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"space-between\",\r\n   },\r\n})","import {TextField, Typography} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback} from 'react'\r\n\r\n\r\nexport const EditableSpan: FC<EditableSpanType> = memo((props) => {\r\n   const {value, onChangeTextTitle, variant, editMode, setEditModeCallback,} = props\r\n\r\n   const onBlurHandler = useCallback(() =>\r\n      setEditModeCallback(false), [setEditModeCallback])\r\n   const onDoubleClickHandler = useCallback(() =>\r\n      setEditModeCallback(true), [setEditModeCallback])\r\n   const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n      onChangeTextTitle(e.currentTarget.value), [onChangeTextTitle])\r\n   const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) =>\r\n   e.key === \"Enter\" && setEditModeCallback(false), [setEditModeCallback])\r\n\r\n   return (\r\n      <div>\r\n         {\r\n            editMode\r\n               ? <TextField\r\n                  autoFocus\r\n                  value={value}\r\n                  onBlur={onBlurHandler}\r\n                  onChange={onChangeHandler}\r\n                  onKeyPress={onKeyPressHandler}\r\n                  id=\"standard-basic\" size={\"small\"}\r\n               />\r\n               : <Typography\r\n                  gutterBottom\r\n                  variant={variant}\r\n                  onDoubleClick={onDoubleClickHandler}\r\n               >\r\n                  {value}\r\n               </Typography>\r\n         }\r\n      </div>\r\n   )\r\n})\r\n\r\ntype EditableSpanType = {\r\n   value: string\r\n   editMode: boolean\r\n   onChangeTextTitle: (value: string) => void\r\n   setEditModeCallback: (editMode: boolean) => void\r\n   variant:\r\n      | 'h1'\r\n      | 'h2'\r\n      | 'h3'\r\n      | 'h4'\r\n      | 'h5'\r\n      | 'h6'\r\n      | 'subtitle1'\r\n      | 'subtitle2'\r\n      | 'body1'\r\n      | 'body2'\r\n      | 'caption'\r\n      | 'button'\r\n      | 'overline'\r\n      | 'srOnly'\r\n      | 'inherit'\r\n}\r\n\r\n","import {Grid, IconButton} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {todoListsActions} from \"../../../../../Redux\";\r\nimport ClearAllIcon from \"@material-ui/icons/ClearAll\";\r\nimport {useActions} from \"../../../../../Utils/useActions\";\r\nimport React, {FC, memo, useCallback, useState} from 'react';\r\nimport {EditableSpan} from \"../../../../Commons/EditableSpan/EditableSpan\";\r\n\r\nexport const TitleTodoLists: FC<TitleTodoListType> = memo(({todoList_ID, title}) => {\r\n   const classes = useStyles();\r\n   const [valueTitle, setValueTitle] = useState(title)\r\n   const [editMode, setEditMode] = useState(false)\r\n   const {changeTitleTodoList, removeTodoList} = useActions(todoListsActions)\r\n\r\n   // ============================= CALLBACKS ==========================================================================\r\n   const setEditModeCallback = useCallback((editMode: boolean) => {\r\n      setEditMode(editMode)\r\n      !editMode && changeTitleTodoList({todoList_ID, newTitle: valueTitle})\r\n   }, [changeTitleTodoList, todoList_ID, valueTitle])\r\n\r\n   const onClickRemoveTodoListHandler = useCallback(() => removeTodoList(todoList_ID), [removeTodoList, todoList_ID])\r\n   const onChangeTextTitleHandler = useCallback((value: string) => setValueTitle(value), [setValueTitle])\r\n\r\n   return (\r\n      <Grid container className={classes.grid_container}>\r\n         <EditableSpan\r\n            variant={\"h5\"}\r\n            value={valueTitle}\r\n            editMode={editMode}\r\n            setEditModeCallback={setEditModeCallback}\r\n            onChangeTextTitle={onChangeTextTitleHandler}\r\n         />\r\n         <IconButton\r\n            size=\"small\"\r\n            onClick={onClickRemoveTodoListHandler}\r\n         >\r\n            <ClearAllIcon/>\r\n         </IconButton>\r\n      </Grid>\r\n   );\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n   grid_container: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      marginBottom: \"15px\",\r\n      justifyContent: \"center\",\r\n   },\r\n});\r\n\r\ntype TitleTodoListType = {\r\n   title: string\r\n   todoList_ID: string\r\n}\r\n\r\n","import AddIcon from \"@material-ui/icons/Add\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useActions} from \"../../../../../Utils/useActions\";\r\nimport {FilterPriorityTask} from \"../../../../../Redux/Tasks/Enums\";\r\nimport {tasksActions, todoListsActions} from \"../../../../../Redux\";\r\nimport {ProgressTodoListType} from \"../../../../../Redux/TodoLists/Types\";\r\nimport React, {ChangeEvent, FC, KeyboardEvent, memo, useCallback, useState} from 'react';\r\nimport {\r\n   Grid,\r\n   Select,\r\n   MenuItem,\r\n   TextField,\r\n   IconButton,\r\n   InputLabel,\r\n   FormControl,\r\n   FormHelperText,\r\n   CircularProgress\r\n} from \"@material-ui/core\";\r\n\r\nexport const AddTaskTodoList: FC<AddTaskTodoListType> = memo((props) => {\r\n   const {todoList_ID, selectPriorityValue, progressTodoList} = props\r\n\r\n   const classes = useStyles();\r\n   const {addTask} = useActions(tasksActions)\r\n   const {setValueSelect} = useActions(todoListsActions)\r\n\r\n   const [valueTask, setValueTask] = useState(\"\")\r\n   const [errorInput, setErrorInput] = useState(false)\r\n   const [errorSelect, setErrorSelect] = useState(false)\r\n\r\n   const onClickAddTaskHandler = useCallback(() => {\r\n      if (!selectPriorityValue) {\r\n         setErrorSelect(true)\r\n      } else if (!valueTask.trim()) {\r\n         setErrorInput(true)\r\n      } else if (!errorInput && !errorSelect) {\r\n         addTask({title: valueTask.trim(), todoList_ID, selectPriorityValue})\r\n         setValueTask(\"\")\r\n         setValueSelect({todoList_ID, selectPriorityValue: FilterPriorityTask.null})\r\n      }\r\n   }, [selectPriorityValue, valueTask, errorInput, errorSelect, addTask, todoList_ID, setValueSelect])\r\n   const changeValueSelectHandler = useCallback((e: ChangeEvent<{ value: unknown }>) => {\r\n      setValueSelect({todoList_ID, selectPriorityValue: e.target.value as FilterPriorityTask})\r\n      setErrorSelect(false)\r\n   }, [setValueSelect, todoList_ID])\r\n   const onChangeTextTaskHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n      setValueTask(e.currentTarget.value)\r\n      setErrorInput(false)\r\n   }, [setValueTask, setErrorInput])\r\n   const onEnterHandler = useCallback((e: KeyboardEvent<HTMLDivElement>) => {\r\n      e.key === \"Enter\" && onClickAddTaskHandler()\r\n   }, [onClickAddTaskHandler])\r\n\r\n   return (\r\n      <Grid container className={classes.grid_container}>\r\n         <TextField\r\n            size={\"small\"}\r\n            value={valueTask}\r\n            error={errorInput}\r\n            variant=\"outlined\"\r\n            id=\"outlined-basic\"\r\n            label=\"Add new task title\"\r\n            onKeyPress={onEnterHandler}\r\n            className={classes.text_field}\r\n            onChange={onChangeTextTaskHandler}\r\n            disabled={progressTodoList === \"add-task\"}\r\n            helperText={errorInput && \"Incorrect entry\"}\r\n         />\r\n         <FormControl variant=\"outlined\" size={\"small\"}>\r\n            <InputLabel id=\"demo-simple-select-outlined-label\">Priority</InputLabel>\r\n            {\r\n               errorSelect &&\r\n               <FormHelperText className={classes.form_helper_text}>\r\n                 Enter priority\r\n               </FormHelperText>\r\n            }\r\n            <Select\r\n               label=\"Priority\"\r\n               error={errorSelect}\r\n               className={classes.select}\r\n               value={selectPriorityValue}\r\n               id=\"demo-simple-select-outlined\"\r\n               onChange={changeValueSelectHandler}\r\n               disabled={progressTodoList === \"add-task\"}\r\n               labelId=\"demo-simple-select-outlined-label\"\r\n            >\r\n               <MenuItem value={FilterPriorityTask.High}>High</MenuItem>\r\n               <MenuItem value={FilterPriorityTask.Middle}>Middle</MenuItem>\r\n               <MenuItem value={FilterPriorityTask.Low}>Low</MenuItem>\r\n            </Select>\r\n         </FormControl>\r\n         <IconButton\r\n            onClick={onClickAddTaskHandler}\r\n            disabled={progressTodoList === \"add-task\"}\r\n         >\r\n            {\r\n               progressTodoList === \"add-task\"\r\n                  ? <CircularProgress size={24}/>\r\n                  : <AddIcon/>\r\n            }\r\n         </IconButton>\r\n      </Grid>\r\n   )\r\n})\r\n\r\nexport type AddTaskTodoListType = {\r\n   todoList_ID: string\r\n   progressTodoList: ProgressTodoListType\r\n   selectPriorityValue: FilterPriorityTask | null\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n   grid_container: {\r\n      height: \"45px\",\r\n      display: \"flex\",\r\n      alignItems: \"start\",\r\n      marginBottom: \"7px\",\r\n      justifyContent: \"space-between\",\r\n   },\r\n   text_field: {\r\n      marginRight: \"10px\",\r\n   },\r\n   select: {\r\n      width: \"100px\",\r\n   },\r\n   form_helper_text: {\r\n      color: \"red\",\r\n   },\r\n})\r\n","import {Typography} from \"@material-ui/core\";\r\nimport React, {useCallback, useState} from 'react';\r\nimport {tasksActions} from \"../../../../../../../Redux\";\r\nimport {useActions} from \"../../../../../../../Utils/useActions\";\r\nimport {FilterPriorityTask} from \"../../../../../../../Redux/Tasks/Enums\";\r\nimport {EditableSpan} from \"../../../../../../Commons/EditableSpan/EditableSpan\";\r\n\r\nexport const TaskTitle: React.FC<TaskTitleType> = React.memo((props) => {\r\n   const {task_title, task_priority, task_ID, todoList_ID} = props\r\n\r\n   const {updateTask} = useActions(tasksActions)\r\n   const [value, setValue] = useState<string>(task_title)\r\n   const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n   const onChangeTextTitle = useCallback((value: string) => setValue(value), [setValue])\r\n   const setEditModeCallback = useCallback((editMode: boolean) => {\r\n      setEditMode(editMode)\r\n      !editMode &&\r\n      updateTask({todoList_ID, task_ID, updateTaskBody: {title: value}})\r\n   }, [task_ID, todoList_ID, updateTask, value])\r\n\r\n   return (\r\n      <span style={{\r\n         width: \"100%\",\r\n         display: \"flex\",\r\n         padding: \"0 10px\",\r\n         alignItems: \"center\",\r\n         justifyContent: \"space-between\",\r\n      }}>\r\n         <EditableSpan\r\n            value={value}\r\n            variant={\"button\"}\r\n            editMode={editMode}\r\n            onChangeTextTitle={onChangeTextTitle}\r\n            setEditModeCallback={setEditModeCallback}\r\n         />\r\n         <Typography\r\n            gutterBottom\r\n            variant={\"button\"}\r\n            style={{\r\n               width: \"50px\",\r\n               fontSize: \"12px\",\r\n               textAlign: \"center\",\r\n            }}\r\n         >\r\n            {task_priority}\r\n         </Typography>\r\n      </span>\r\n   );\r\n});\r\n\r\nexport type TaskTitleType = {\r\n   task_ID: string\r\n   task_title: string\r\n   todoList_ID: string\r\n   task_priority: FilterPriorityTask\r\n}","import {TaskTitle} from \"./TaskTittle/TaskTitle\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {tasksActions} from \"../../../../../../Redux\";\r\nimport React, {FC, memo, useCallback, useState} from 'react';\r\nimport {TaskType} from \"../../../../../../Redux/Tasks/Types\";\r\nimport {useActions} from \"../../../../../../Utils/useActions\";\r\nimport {FilterStatusTask} from \"../../../../../../Redux/Tasks/Enums\";\r\nimport {Checkbox, CircularProgress, Grid, IconButton, ListItem} from \"@material-ui/core\";\r\n\r\nexport const TaskTodoList: FC<TaskTodoListType> = memo(({todoList_ID, task}) => {\r\n   const classes = useStyles()\r\n   const {removeTask, updateTask} = useActions(tasksActions)\r\n   const [isDisable, setIsDisable] = useState(true)\r\n\r\n   const opacityIconButton = isDisable ? \"0%\" : \"100%\"\r\n   const opacityTask = task.status === FilterStatusTask.New ? \"100%\" : \"40%\"\r\n\r\n   const onMouseOut = useCallback(() => setIsDisable(true), [setIsDisable])\r\n   const onMouseOverHandler = useCallback(() => setIsDisable(false), [setIsDisable])\r\n   const onClickRemoveTaskHandler = useCallback(() => {\r\n      removeTask({todoList_ID, task_ID: task.id})\r\n      setIsDisable(false)\r\n   }, [removeTask, todoList_ID, task.id])\r\n   const onChangeCheckedTaskHandler = useCallback(() => {\r\n      updateTask({\r\n         todoList_ID,\r\n         task_ID: task.id,\r\n         updateTaskBody: task.status === FilterStatusTask.New\r\n            ? {status: FilterStatusTask.Completed}\r\n            : {status: FilterStatusTask.New}\r\n      })\r\n   }, [updateTask, todoList_ID, task.id, task.status])\r\n\r\n   return (\r\n      <Grid container className={classes.grid_container}>\r\n         <Grid item className={classes.grid_item}>\r\n            <ListItem\r\n               button\r\n               divider\r\n               onMouseOut={onMouseOut}\r\n               onMouseOver={onMouseOverHandler}\r\n               disabled={task.progress === \"remove-task\"}\r\n               style={{\r\n                  padding: \"2px\",\r\n                  opacity: opacityTask,\r\n               }}\r\n            >\r\n               <Checkbox\r\n                  onChange={onChangeCheckedTaskHandler}\r\n                  inputProps={{'aria-label': 'controlled'}}\r\n                  checked={task.status === FilterStatusTask.Completed}\r\n               />\r\n               <TaskTitle\r\n                  key={task.id}\r\n                  task_ID={task.id}\r\n                  task_title={task.title}\r\n                  todoList_ID={todoList_ID}\r\n                  task_priority={task.priority}\r\n               />\r\n               <IconButton\r\n                  size={\"small\"}\r\n                  aria-label=\"delete\"\r\n                  onClick={onClickRemoveTaskHandler}\r\n                  style={{\r\n                     opacity: opacityIconButton,\r\n                  }}\r\n               >\r\n                  {\r\n                     task.progress === \"remove-task\"\r\n                        ? <CircularProgress size={24}/>\r\n                        : <DeleteIcon/>\r\n                  }\r\n               </IconButton>\r\n            </ListItem>\r\n         </Grid>\r\n      </Grid>\r\n   )\r\n})\r\n\r\nexport type TaskTodoListType = {\r\n   task: TaskType\r\n   todoList_ID: string\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n   grid_container: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"space-between\",\r\n   },\r\n   grid_item: {\r\n      width: \"100%\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"space-between\",\r\n   },\r\n})","import React, {FC, memo} from 'react';\r\nimport {List} from \"@material-ui/core\";\r\nimport {TaskTodoList} from \"./TaskTodoList/TaskTodoList\";\r\nimport {TaskType} from \"../../../../../Redux/Tasks/Types\";\r\n\r\nexport const ListTasksTodoList: FC<ListTasksTodoListType> = memo(({tasks, todoList_ID}) => {\r\n   return (\r\n      <List component=\"nav\"\r\n            aria-label=\"mailbox folders\">\r\n         {tasks.map(task => (\r\n            <TaskTodoList\r\n               task={task}\r\n               key={task.id}\r\n               todoList_ID={todoList_ID}\r\n            />\r\n         ))}\r\n      </List>\r\n   );\r\n});\r\n\r\nexport type ListTasksTodoListType = {\r\n   tasks: TaskType[]\r\n   todoList_ID: string\r\n}","import {TasksStateType} from \"../Types\";\r\nimport {RootStateType} from \"../../store\";\r\n\r\nexport const selectTasks = (state: RootStateType): TasksStateType => state.tasks","import Box from '@material-ui/core/Box';\r\nimport React, {FC, memo, useCallback} from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress, {LinearProgressProps} from '@material-ui/core/LinearProgress';\r\n\r\nexport const LinearProgressTasks: FC<LinearProgressTasksType> = memo((props) => {\r\n   const { numberOfAllTasks, numberOfCompletedTasks } = props\r\n\r\n   const classes = useStyles();\r\n\r\n   const getProgress = useCallback(() =>\r\n      (numberOfCompletedTasks / numberOfAllTasks) * 100, [numberOfCompletedTasks, numberOfAllTasks])\r\n\r\n   return (\r\n      <div className={classes.linear_progress_tasks}>\r\n         <LinearProgressWithLabel value={getProgress()}/>\r\n      </div>\r\n   );\r\n});\r\n\r\nconst LinearProgressWithLabel = memo((props: LinearProgressProps & { value: number }) => {\r\n   return (\r\n      <Box display=\"flex\" alignItems=\"center\">\r\n         <Box width=\"100%\" mr={1}>\r\n            <LinearProgress variant=\"determinate\" {...props} />\r\n         </Box>\r\n         <Box minWidth={35}>\r\n            <Typography\r\n               variant=\"body2\"\r\n               color=\"textSecondary\"\r\n            >\r\n               {`${Math.round(props.value,)}%`}\r\n            </Typography>\r\n         </Box>\r\n      </Box>\r\n   );\r\n})\r\n\r\nexport type LinearProgressTasksType = {\r\n   numberOfAllTasks: number\r\n   numberOfCompletedTasks: number\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n   linear_progress_tasks: {\r\n      width: '100%',\r\n   },\r\n});\r\n","import {TasksStateType, TaskType} from \"../Redux/Tasks/Types\";\r\nimport {getFilteredPriorityTasks} from \"./getFilteredPriorityTasks\";\r\nimport {FilterPriorityTask, FilterStatusTask} from \"../Redux/Tasks/Enums\";\r\n\r\nexport const getFilteredCheckedTasksCallback = (todoList_ID: string, filterStatus: FilterStatusTask, filterPriority: FilterPriorityTask, tasks: TasksStateType): TaskType[] => {\r\n   const filteredPriorityState = getFilteredPriorityTasks(todoList_ID, filterPriority, tasks)\r\n   switch (filterStatus) {\r\n      case FilterStatusTask.New:\r\n         return filteredPriorityState.filter(t => t.status === FilterStatusTask.New)\r\n      case FilterStatusTask.Completed:\r\n         return filteredPriorityState.filter(t => t.status === FilterStatusTask.Completed)\r\n      default:\r\n         return filteredPriorityState\r\n   }\r\n}","import {FilterPriorityTask} from \"../Redux/Tasks/Enums\";\r\nimport {TasksStateType, TaskType} from \"../Redux/Tasks/Types\";\r\n\r\nexport const getFilteredPriorityTasks = (todoList_ID: string, filterPriority: FilterPriorityTask, tasks: TasksStateType): TaskType[] => {\r\n   switch (filterPriority) {\r\n      case FilterPriorityTask.High:\r\n         return tasks[todoList_ID].filter(t => t.priority === FilterPriorityTask.High)\r\n      case FilterPriorityTask.Middle:\r\n         return tasks[todoList_ID].filter(t => t.priority === FilterPriorityTask.Middle)\r\n      case FilterPriorityTask.Low:\r\n         return tasks[todoList_ID].filter(t => t.priority === FilterPriorityTask.Low)\r\n      default:\r\n         return tasks[todoList_ID]\r\n   }\r\n}","import {Grid, Paper} from \"@material-ui/core\";\r\nimport {tasksActions} from \"../../../../Redux\";\r\nimport React, {FC, memo, useEffect} from \"react\";\r\nimport {useAppSelector} from \"../../../../Redux/store\";\r\nimport {useActions} from \"../../../../Utils/useActions\";\r\nimport {FilterButtons} from \"./FilterButtons/FilterButtons\";\r\nimport {TitleTodoLists} from \"./TitleTodoList/TitleTodoList\";\r\nimport {FilterStatusTask} from \"../../../../Redux/Tasks/Enums\";\r\nimport {AddTaskTodoList} from \"./AddTaskTodoList/AddTaskTodoList\";\r\nimport {TodoListsStateType} from \"../../../../Redux/TodoLists/Types\";\r\nimport {ListTasksTodoList} from \"./ListTasksTodoList/ListTasksTodoList\";\r\nimport {selectTasks} from \"../../../../Redux/Tasks/Selectors/selectTasks\";\r\nimport {LinearProgressTasks} from \"./LinearProgressTasks/LinearProgressTasks\";\r\nimport {getFilteredCheckedTasksCallback} from \"../../../../Utils/getFilteredCheckedTasks\";\r\n\r\nexport const TodoList: FC<TodoListType> = memo(({todoList}) => {\r\n   const tasks = useAppSelector(selectTasks)\r\n   const {getTasks} = useActions(tasksActions)\r\n\r\n   const filteredTasks = getFilteredCheckedTasksCallback(todoList.id, todoList.filterStatus, todoList.filterPriority, tasks)\r\n   const numberOfAllTasks = tasks[todoList.id].length\r\n   const numberOfCompletedTasks = tasks[todoList.id].filter(t => t.status === FilterStatusTask.Completed).length\r\n\r\n   useEffect(() => {\r\n      getTasks(todoList.id)\r\n   }, [getTasks, todoList.id])\r\n\r\n   return (\r\n      <Grid item>\r\n         <Paper elevation={7} style={{padding: \"10px\"}}>\r\n            <TitleTodoLists\r\n               title={todoList.title}\r\n               todoList_ID={todoList.id}\r\n            />\r\n            <AddTaskTodoList\r\n               todoList_ID={todoList.id}\r\n               progressTodoList={todoList.progress}\r\n               selectPriorityValue={todoList.selectPriorityValue}\r\n            />\r\n            {\r\n               numberOfAllTasks !== 0 &&\r\n               <LinearProgressTasks\r\n                 numberOfAllTasks={numberOfAllTasks}\r\n                 numberOfCompletedTasks={numberOfCompletedTasks}\r\n               />\r\n            }\r\n            <ListTasksTodoList\r\n               tasks={filteredTasks}\r\n               todoList_ID={todoList.id}\r\n            />\r\n            <FilterButtons\r\n               todoList_ID={todoList.id}\r\n               filterStatus={todoList.filterStatus}\r\n               filterPriority={todoList.filterPriority}\r\n            />\r\n         </Paper>\r\n      </Grid>\r\n   )\r\n})\r\n\r\nexport type TodoListType = {\r\n   todoList: TodoListsStateType\r\n}","import {RootStateType} from \"../../store\";\r\nimport {TodoListsStateType} from \"../Types\";\r\n\r\nexport const selectTodoLists = (state: RootStateType): TodoListsStateType[] => state.todoLists","import React, {memo} from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {TodoList} from \"./TodoList/TodoList\";\r\nimport {useAppSelector} from \"../../../Redux/store\";\r\nimport {selectTodoLists} from \"../../../Redux/TodoLists/Selectors/selectTodoLists\";\r\n\r\nexport const TodoLists = memo(()  => {\r\n   const todoLists = useAppSelector(selectTodoLists)\r\n   return (\r\n      <Grid container spacing={3}>\r\n         { todoLists.map(tl => <TodoList key={tl.id} todoList={tl} />) }\r\n      </Grid>\r\n   );\r\n});\r\n\r\n","import {useSelector} from \"react-redux\";\r\nimport {todoListsActions} from \"../../../Redux\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useActions} from \"../../../Utils/useActions\";\r\nimport React, {ChangeEvent, memo, useState} from 'react';\r\nimport {Grid, IconButton, TextField} from \"@material-ui/core\";\r\nimport {selectIsFetching} from \"../../../Redux/App/Selectors\";\r\nimport CreateNewFolderIcon from \"@material-ui/icons/CreateNewFolder\";\r\n\r\nexport const AddNewTodoList = memo(() => {\r\n   const classes = useStyles();\r\n   const isFetching = useSelector(selectIsFetching)\r\n   const {addTodoList} = useActions(todoListsActions)\r\n   const [newTodoListTitle, setNewTodoListTitle] = useState(\"\")\r\n\r\n   const addTodoListHandler = () => {\r\n      addTodoList(newTodoListTitle)\r\n      setNewTodoListTitle(\"\")\r\n   }\r\n   const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) =>\r\n      setNewTodoListTitle(e.currentTarget.value)\r\n\r\n   return (\r\n      <Grid container className={classes.grid_container}>\r\n         <Grid item className={classes.grid_item}>\r\n            <TextField\r\n               multiline\r\n               size={\"small\"}\r\n               variant=\"outlined\"\r\n               label=\"New Todo list\"\r\n               id=\"outlined-textarea\"\r\n               value={newTodoListTitle}\r\n               placeholder=\"Enter title\"\r\n               onChange={onChangeHandler}\r\n            />\r\n            <IconButton onClick={addTodoListHandler} disabled={isFetching}>\r\n               <CreateNewFolderIcon/>\r\n            </IconButton>\r\n         </Grid>\r\n      </Grid>\r\n   );\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n   grid_container: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n   },\r\n   grid_item: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      margin: \"100px 0 40px 0\",\r\n      justifyContent: \"center\",\r\n   },\r\n})","import {Navigate} from \"react-router-dom\";\r\nimport {SideBar} from \"./SideBar/SideBar\";\r\nimport React, {FC, useEffect} from 'react';\r\nimport {todoListsActions} from \"../../Redux\";\r\nimport {TodoLists} from \"./TodoLists/TodoLists\";\r\nimport {useAppSelector} from \"../../Redux/store\";\r\nimport {useActions} from \"../../Utils/useActions\";\r\nimport {selectIsLoggedIn} from \"../../Redux/Auth/Selectors\";\r\nimport {AddNewTodoList} from \"./AddNewTodoList/AddNewTodoList\";\r\n\r\nexport const AuthorizedApp: FC<AuthorizedAppType> = ({open, setOpen}) => {\r\n   const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n   const {getTodoLists} = useActions(todoListsActions)\r\n\r\n   const handleDrawerCloseCallback = () => setOpen(false)\r\n\r\n   useEffect(() => {\r\n      getTodoLists()\r\n   }, [])\r\n\r\n   if (!isLoggedIn) {\r\n      return <Navigate to={\"/login\"}/>\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <SideBar\r\n            open={open}\r\n            handleDrawerCloseCallback={handleDrawerCloseCallback}\r\n         />\r\n         <AddNewTodoList/>\r\n         <TodoLists />\r\n      </>\r\n   );\r\n};\r\n\r\ntype AuthorizedAppType = {\r\n   open: boolean\r\n   setOpen: (open: boolean) => void\r\n}","import clsx from 'clsx';\r\nimport React, {FC, memo} from 'react';\r\nimport {authActions} from \"../../Redux\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport {useAppSelector} from \"../../Redux/store\";\r\nimport {useActions} from \"../../Utils/useActions\";\r\nimport {selectIsFetching} from \"../../Redux/App/Selectors\";\r\nimport {selectIsLoggedIn} from \"../../Redux/Auth/Selectors\";\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\r\n\r\nexport const AppBarTodoList: FC<AppBarTodoListType> = memo(({open, handleDrawerOpenCallback}) => {\r\n   const classes = useStyles()\r\n   const {logout} = useActions(authActions)\r\n   const isLoggedIn = useAppSelector(selectIsLoggedIn)\r\n   const isFetching = useAppSelector(selectIsFetching)\r\n\r\n   const onLogoutHandle = () => logout()\r\n   const handleDrawerOpen = () => handleDrawerOpenCallback()\r\n\r\n   return (\r\n      <AppBar\r\n         position=\"sticky\"\r\n         className={clsx(classes.appBar, {\r\n            [classes.appBarShift]: open,\r\n         })}\r\n      >\r\n         <Toolbar>\r\n            <IconButton\r\n               color=\"inherit\"\r\n               aria-label=\"open drawer\"\r\n               onClick={handleDrawerOpen}\r\n               edge=\"start\"\r\n               className={clsx(classes.menuButton, {\r\n                  [classes.hide]: open,\r\n               })}\r\n            >\r\n               <MenuIcon/>\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n               My TodoLists\r\n            </Typography>\r\n            {\r\n               isLoggedIn &&\r\n               <Button color=\"inherit\" onClick={onLogoutHandle}>\r\n                 Logout\r\n               </Button>\r\n            }\r\n         </Toolbar>\r\n         {\r\n            isFetching && <LinearProgress/>}\r\n      </AppBar>\r\n   )\r\n})\r\n\r\nexport type AppBarTodoListType = {\r\n   open: boolean\r\n   handleDrawerOpenCallback: () => void\r\n}\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n   createStyles({\r\n      appBar: {\r\n         zIndex: theme.zIndex.drawer + 1,\r\n         transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n         }),\r\n      },\r\n      appBarShift: {\r\n         marginLeft: drawerWidth,\r\n         width: `calc(100% - ${drawerWidth}px)`,\r\n         transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n         }),\r\n      },\r\n      menuButton: {\r\n         marginRight: 36,\r\n      },\r\n      title: {\r\n         flexGrow: 1,\r\n      },\r\n      hide: {\r\n         display: 'none',\r\n      },\r\n   }),\r\n)","import {RootStateType} from \"../../store\";\r\n\r\nexport const selectErrorMessage = (state: RootStateType): string => state.app.errorMessage","import * as React from 'react';\r\nimport Stack from '@mui/material/Stack';\r\nimport {appActions} from \"../../../Redux\";\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport {useAppSelector} from \"../../../Redux/store\";\r\nimport {useActions} from \"../../../Utils/useActions\";\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport {selectErrorMessage} from \"../../../Redux/App/Selectors/selectErrorMessage\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n   props,\r\n   ref,\r\n) {\r\n   return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n})\r\n\r\nexport const CustomSnackbar = () => {\r\n   const errorMessage = useAppSelector(selectErrorMessage)\r\n   const {setIsErrorGettingData} = useActions(appActions)\r\n\r\n   const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n      if (reason === 'clickaway')\r\n         return;\r\n      setIsErrorGettingData({errorMessage: \"\"})\r\n   }\r\n\r\n   return (\r\n      <Stack spacing={2} sx={{ width: '100%' }}>\r\n         <Snackbar open={!!errorMessage} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n               {errorMessage}\r\n            </Alert>\r\n         </Snackbar>\r\n         {/*<Alert severity=\"error\">This is an error message!</Alert>*/}\r\n         {/*<Alert severity=\"warning\">This is a warning message!</Alert>*/}\r\n         {/*<Alert severity=\"info\">This is an information message!</Alert>*/}\r\n         {/*<Alert severity=\"success\">This is a success message!</Alert>*/}\r\n      </Stack>\r\n   )\r\n}","import React from 'react';\r\nimport s from \"./CircularPreloader.module.css\"\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nexport const CircularPreloader = () => {\r\n   return (\r\n      <div className={s.circularPreloader}\r\n         style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n         <CircularProgress/>\r\n      </div>\r\n   );\r\n};","import {appActions} from \"../Redux\";\r\nimport {useAppSelector} from \"../Redux/store\";\r\nimport {Login} from \"../Features/Login/Login\";\r\nimport {useActions} from \"../Utils/useActions\";\r\nimport Container from \"@mui/material/Container\";\r\nimport React, {useEffect, useState} from 'react';\r\nimport NotFound from \"./Commons/NotFound/NotFound\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {selectIsInitialized} from \"../Redux/App/Selectors\";\r\nimport {AuthorizedApp} from \"./AuthorizedApp/AuthorizedApp\";\r\nimport {AppBarTodoList} from \"./AppBarTodoList/AppBarTodoList\";\r\nimport {CustomSnackbar} from \"./Commons/Snackbar/CustomSnackbar\";\r\nimport {CircularPreloader} from \"./CircularPreloader/CircularPreloader\";\r\n\r\nexport const App = () => {\r\n   const {initializeApp} = useActions(appActions)\r\n   const [open, setOpen] = useState(false);\r\n   const isInitialized = useAppSelector(selectIsInitialized)\r\n\r\n   const handleDrawerOpenCallback = () => setOpen(true)\r\n\r\n   useEffect(() => {\r\n      initializeApp()\r\n   }, [])\r\n\r\n   if (!isInitialized) {\r\n      return <CircularPreloader/>\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <AppBarTodoList open={open} handleDrawerOpenCallback={handleDrawerOpenCallback}/>\r\n         <Container fixed>\r\n            <Routes>\r\n               <Route path={\"/\"} element={<AuthorizedApp open={open} setOpen={setOpen}/>}/>\r\n               <Route path={\"/login\"} element={<Login/>}/>\r\n               <Route path={\"/404\"} element={<NotFound/>}/>\r\n               <Route path={\"*\"} element={<Navigate to={\"/404\"}/>}/>\r\n            </Routes>\r\n         </Container>\r\n         <CustomSnackbar/>\r\n      </div>\r\n   );\r\n};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './Components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./Redux/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n   <React.StrictMode>\r\n      <HashRouter>\r\n         <Provider store={store}>\r\n            <CssBaseline/>\r\n            <App/>\r\n         </Provider>\r\n      </HashRouter>\r\n   </React.StrictMode>,\r\n   document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}